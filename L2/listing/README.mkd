# 1. Что выведет программа? Объяснить вывод программы.

```go
package main
import (
  "fmt"
)

func main() {
  a := [5]int{76, 77, 78, 79, 80}
  var b []int = a[1:4]
  fmt.Println(b)
}
```
Вывод:
```
[77 78 79]
```
Объяснение:
Так как берем слайс с элементами от 1 (включительно) до 4 (не включительно) по индексу. Нумерация индексов начинается с 0.

# 2. Что выведет программа? Объяснить вывод программы. Объяснить как работают defer’ы и порядок их вызовов.

```go
package main
import (
  "fmt"
)

func test() (x int) {
  defer func() {
    x++
  }()
  x = 1
  return
}

func anotherTest() int {
  var x int
  defer func() {
    x++
  }()
  x = 1
  return x
}

func main() {
  fmt.Println(test())fmt.Println(anotherTest())
}
```

Вывод:
```
2
1
```

# 3. Что выведет программа? Объяснить вывод программы. Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.

```go
package main

import (
  "fmt"
  "os"
)

func Foo() error {
  var err *os.PathError = nil
  return err
}

func main() {
  err := Foo()
  fmt.Println(err)
  fmt.Println(err == nil)
}
```

Вывод:
```
<nil>
false
```
# 4. Что выведет программа? Объяснить вывод программы.

```go
package main

func main() {
  ch := make(chan int)
  go func() {
    for i := 0; i < 10; i++ {
    ch <- i
  }
  }()
  for n := range ch {
    println(n)
  }
}
```

Вывод:
```
0
1
2
3
4
5
6
7
8
9
fatal error: all goroutines are asleep - deadlock!
```

Объяснение:
Ждем данные из канала, а в канал никто не пишет

# 5. Что выведет программа? Объяснить вывод программы.
```go
package main

type customError struct {
	msg string
}

func (e *customError) Error() string {
	return e.msg
}

func test() *customError {
	{
		// do something
	}
	return nil
}

func main() {
	var err error
	err = test()
	if err != nil {
		println("error")
		return
	}
	println("ok")
}
```

Вывод:
```
error
```

# 6. Что выведет программа? Объяснить вывод программы. Рассказать про внутреннее устройство слайсов и что происходит при передаче их в качестве аргументов функции.
```go
func main() {
	var s = []string{"1", "2", "3"}
	modifySlice(s)
	fmt.Println(s)
}

func modifySlice(i []string) {
	i[0] = "3"
	i = append(i, "4")
	i[1] = "5"
	i = append(i, "6")
}
```

Вывод:
```
[3 2 3]
```

Объяснение:
Потому что мы передаем указатель на слайс и при первом изменение меняем переданый слайс, а при добавление нового элемента мы получаем новый слайс и потом меняем уже новый слайс.

# 7. Что выведет программа? Объяснить вывод программы.
```go
бесконечный цикл
```

Вывод:
```

```

Объяснение:
